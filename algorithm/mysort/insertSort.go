// 插入排序： 已排序区间|未排序区间
// 	- 从未排序区间取一个第一元素j，从已排序区间最大值往前进行比较，若A[j-1] > tmp(选择的元素j)，则后移A[j-1]；
//	- 经一轮k(已排序区间)次比较，找到待插入位置j，将之前的tmp插入该位置，则已排序区间完成一次插入排序；
//  - 经过N-1次迭代后，所有数据已排序完成；
package main

import "fmt"

// 想象扑克牌抓拍排序的过程，就是插入排序
func insertSort(A []int, N int) []int {
	var j int
	for i := 1; i < N; i++ { //N-1轮插入检测
		tmp := A[i]                             //待插入数元素
		for j = i; j > 0 && A[j-1] > tmp; j-- { //j从最大元素开始，往前检测，满足条件:j未迭代完或前一个元素位置大于<待插入数元素>，则前一个元素后移
			A[j] = A[j-1]
		}
		// 最后一次for循环，会执行j--，然后条件检测不满足，即找到了待插入位置j
		A[j] = tmp //留出的空位，即为满足插入的位置(将待插入元素)插入到指定位置
	}
	return A
}

func main() {
	A := []int{1, 3, 4, 6, 8, 5, 7, 9, 2}
	fmt.Println(A)
	fmt.Println(insertSort(A, len(A)))
}
